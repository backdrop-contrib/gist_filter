<?php
/**
 * @file
 * Tests for the Gist Filter module.
 */

/**
 * {@inheritdoc}
 */
class GistFilterTestCase extends BackdropWebTestCase {
  protected $account;
  protected $contentType;

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('gist_filter');

    // Create a content type to test the filters (with default format)
    $this->contentType = $this->backdropCreateContentType();

    // Create and log in our user.
    $this->account = $this->backdropCreateUser(array(
      'create ' . $this->contentType->type . ' content',
      'administer filters',
    ));
    $this->backdropLogin($this->account);
  }

  /**
   * Testing the embedded gist option.
   */
  public function testEmbedStyle() {
    // Enable the gist filter.
    $edit = array(
      'filters[gist_filter][status]' => TRUE,
      // Put it at the bottom.
      'filters[gist_filter][weight]' => 40,
    );
    $this->backdropPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));

    // Set the option to embed.
    $edit = array(
      'gist_filter_display_method' => 'embed',
    );
    $this->backdropPost('admin/config/content/formats/filtered_html/filter-settings/gist_filter', $edit, t('Update'));
    $this->backdropPost('admin/config/content/formats/filtered_html', array(), t('Save configuration'));

    // Create a test node.
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412]',
    );
    $this->backdropPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw("Hello! ");
    $this->assertRaw('<script src="//gist.github.com/865412.js"></script>');
  }

  /**
   * Testing the embedded gist option with a file parameter.
   */
  public function testEmbedStyleWithFile() {
    // Enable the gist filter.
    $edit = array(
      'filters[gist_filter][status]' => TRUE,
      // Put it at the bottom.
      'filters[gist_filter][weight]' => 40,
    );
    $this->backdropPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));

    // Set the option to embed.
    $edit = array(
      'gist_filter_display_method' => 'embed',
    );
    $this->backdropPost('admin/config/content/formats/filtered_html/filter-settings/gist_filter', $edit, t('Update'));
    $this->backdropPost('admin/config/content/formats/filtered_html', array(), t('Save configuration'));

    // Create a test node.
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412:php_file.php]',
    );
    $result = $this->backdropPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw("Hello! ");
    $this->assertRaw('<script src="//gist.github.com/865412.js?file=php_file.php"></script>');
  }

  /**
   * Testing the link option.
   */
  public function testLinkStyle() {

    // Enable the gist filter.
    $edit = array(
      'filters[gist_filter][status]' => TRUE,
      // Put it at the bottom.
      'filters[gist_filter][weight]' => 40,
    );
    $this->backdropPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));

    // Set the option to link.
    $edit = array(
      'gist_filter_display_method' => 'link',
    );
    $this->backdropPost('admin/config/content/formats/filtered_html/filter-settings/gist_filter', $edit, t('Update'));
    $this->backdropPost('admin/config/content/formats/filtered_html', array(), t('Save configuration'));

    // Create a test node.
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412]',
    );
    $result = $this->backdropPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw('Hello! <a href="https://gist.github.com/865412">https://gist.github.com/865412</a>');

  }

  /**
   * Testing the link option with a file parameter.
   */
  public function testLinkStyleWithFile() {
    // Enable the gist filter.
    $edit = array(
      'filters[gist_filter][status]' => TRUE,
      // Put it at the bottom.
      'filters[gist_filter][weight]' => 40,
    );
    $this->backdropPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));

    // Set the option to link.
    $edit = array(
      'gist_filter_display_method' => 'link',
    );
    $this->backdropPost('admin/config/content/formats/filtered_html/filter-settings/gist_filter', $edit, t('Update'));
    $this->backdropPost('admin/config/content/formats/filtered_html', array(), t('Save configuration'));

    // Create a test node.
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412:php_file.php]',
    );
    $result = $this->backdropPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw('Hello! <a href="https://gist.github.com/865412#file_php_file.php">https://gist.github.com/865412#file_php_file.php</a>');

  }

  /**
   * Testing the code tag option.
   */
  public function testCodeTagStyle() {
    // Enable the gist filter.
    $edit = array(
      'filters[gist_filter][status]' => TRUE,
      // Put it at the bottom.
      'filters[gist_filter][weight]' => 40,
    );
    $this->backdropPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));

    // Set the option to code.
    $edit = array(
      'gist_filter_display_method' => 'code',
    );
    $this->backdropPost('admin/config/content/formats/filtered_html/filter-settings/gist_filter', $edit, t('Update'));
    $this->backdropPost('admin/config/content/formats/filtered_html', array(), t('Save configuration'));

    // Create a test node.
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412]',
    );
    $result = $this->backdropPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertPattern("@<pre type=\"php\">(.*)echo(.*)</pre>@sm");
    $this->assertPattern("@<pre type=\"ruby\">(.*)a = 1\nputs a</pre>@");

  }

  /**
   * Test that our API retrieval function caches calls to the Github API.
   */
  public function testGistCachingTest() {
    // Make sure our cache is all cleared first.
    cache_clear_all('gist_filter:gist', 'cache', TRUE);
    $this->assertFalse(cache_get('gist_filter:gist:865412'));

    gist_filter_get_gist(865412);

    // Now the cache should be set.
    $cached = cache_get('gist_filter:gist:865412');
    $this->assertTrue($cached->data);
  }
}
